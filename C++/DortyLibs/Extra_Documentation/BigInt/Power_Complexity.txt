Если степень n, то будет выполнено

log2(n) операций.

Каждая по сложности

C * (2^i * i),
где C - переменная от 1 до 2 (чем больше единиц -> тем C ближе к 2)


=>



Вычисление a^b
a - имеет n символов

1) Глупый.
Циклом глупых умножений.

Итого
(n * n) + (2n * n) + (3n * n) + ... + (n*b * n) =
= n^2( 1 + 2 + .. + b)
= n^2 * b^2/2
O(n^2 * b^2)

2) Бинарная декомпозиция. + Глупый.
Бинарная декомпозиция чисел, затем в глупое умножение.

(n * n) + (n * n) + (2n * 2n) +
(n * n) + (n * n) + (2n * 2n) + (4n * 4n)
+ ...

== n^2 (1 + 1 + 2^2 + 1 + 1 + 2^2 + 4^2 + ... + (b/2)^2)

== n^2 ( b^2 )

3) Бинарная Декомпозиция. + FFT
(n * log2(n)) + (n * log2(n)) + (2n * log2(2n)) + 
(n * log2(n)) + (n * log2(n)) + (2n * log2(2n)) + (4n * log2(4n))

т.к.
log2(n * log2(n))
= log2(n) + log2(log2(n))

== n (log2(n) + log2(n) + 2 * log2(n) + 1 + log2(n) + log2(n) + 2 * log2(n) + 1 + 4 * log2(n) + 2)

== n * log2(n) * ( 1 + 1 + 2 + 1 + 1 + 2 + 4 + ... b)

~= n * log2(n) * b * log2(b)     




4) Бин. Декомпоз + FFT. Последние s разрядов.
С учётом того, что a^b >> Base^s ->

s * log2(s) * log2(n)