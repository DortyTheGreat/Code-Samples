#define KAR_TRESH 50

/// Karatsuba, пока не делает ничего со знаком, left.size() > right.size()
static BigInt k_mul(const BigInt& left, const BigInt& right) {

    const int n = left._digits.size(); /// size of biggest num

    /// Используем простую (школьную) арифметику, для просчёта маленьких чисел
    if (n < KAR_TRESH){return left*right;}

    const int fh = (n+1) / 2;   // First half Data (take more)
    const int sh = (n - fh); // Second half of Data

    // Find the first half and second half of first string.

    BigInt L0, L1;
    L0._digits.resize(fh);
    L1._digits.resize(sh);

    BigInt R0;
    BigInt Z0;
    BigInt Z1;


    const int s_sz = right._digits.size();

    const int _0_sz = min(s_sz, fh);


    for(int i = 0;i<fh;++i){
        L0->data[i] = left->data[i];
    }

    for(int i = 0;i<sh;++i){
        L1->data[i] = left->data[fh + i];
    }



    Z0 = k_mul(L0,R0);
    const int _1_sz = s_sz - _0_sz;
    if (_1_sz == 0){
        /// Z2 = 0
        Z1 = k_mul(L1,R0); /// no swap

        ///Z1._appendZeros(fh);


        return new BigInt((*Z1)+(*Z0));
    }else{
        BigInt *R1;
        R1->data.resize(_1_sz);



        for(int i = 0;i<_1_sz;++i){
            R1->data[i] = right->data[fh + i];
        }

        BigInt *Z2 = k_mul(L1,R1); /// no swap

        Z1 = new BigInt((*L0+*L1) * (*R0+*R1) - (*Z2 + *Z0));

        ///if ( !(Z1.data.size() == 1 && Z1.data[0] == 0) )
            ///Z1._appendZeros(fh);

        ///if ( !(Z2.data.size() == 1 && Z2.data[0] == 0) )
            ///Z2._appendZeros(fh * 2);

        return new BigInt(*Z2 + *Z1 + *Z0);
    }

}
