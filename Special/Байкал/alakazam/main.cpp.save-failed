#include <bits/stdc++.h>

using namespace std;

using namespace std;

int n;
int a[100000];      //массив
int tree[400004];   //дерево отрезков. в вершинах хран€тс€ суммы
int mod[400004];    //массив дл€ хранени€ модификаций. 0 обозначает отсутствие
                    //модификаций, любое другое число - присвоенное значение.
void build_tree(int v, int tl, int tr) {
    if (tl == tr) {
        tree[v] = a[tl];
    } else {
        int tm = (tl + tr) / 2;
        build_tree(v * 2, tl, tm);
        build_tree(v * 2 + 1, tm + 1, tr);
        tree[v] = tree[v * 2] + tree[v * 2 + 1];
    }
}

//ѕроталкиваем модификации вершины v еЄ дочерним вершинам.
void push(int v, int tl, int tr) {
    if (mod[v] != 0 && v * 2 + 1 < 400004) {    //если есть что и куда проталкивать

        //проталкиваем несогласованность
        mod[v * 2] = mod[v * 2 + 1] = mod[v];
        mod[v] = 0;

        //и пересчитываем значени€
        int tm = (tl + tr) / 2;
        tree[v * 2] = (tm - tl + 1) * mod[v * 2];
        tree[v * 2 + 1] = (tr - tm) * mod[v * 2 + 1];
    }
}

//«апрос суммы
int get_sum(int l, int r, int v, int tl, int tr) {
    //вариант 1
    if (l <= tl && tr <= r) {
        return tree[v];
    }

    //вариант 2
    if (tr < l || r < tl) {
        return 0;
    }

    //вариант 3
    push(v, tl, tr);    //ѕроталкиваем модификации перед каждым разделением запроса!
    int tm = (tl + tr) / 2;
    return get_sum(l, r, v * 2,     tl,     tm)
         + get_sum(l, r, v * 2 + 1, tm + 1, tr);
}

//«апрос присваивани€ значени€ val отрезку [l;r]
void assign(int l, int r, int val, int v, int tl, int tr) {
    //вариант 1
    if (l <= tl && tr <= r) {
        tree[v] = val * (tr - tl + 1);
        mod[v] = val;   //сохран€ем несогласованность
        return;
    }

    //вариант 2
    if (tr < l || r < tl) {
        return;
    }

    //вариант 3
    push(v, tl, tr);    //ѕроталкиваем модификации перед каждым разделением запроса!
    int tm = (tl + tr) / 2;
    assign(l, r, val, v * 2,     tl,     tm);
    assign(l, r, val, v * 2 + 1, tm + 1, tr);
    tree[v] = tree[v * 2] + tree[v * 2 + 1];
}


void solve() {
    int n, m;
    cin >> n >> m;

    for(int i = 1; i < n+1; ++i){
        int num;
        cin >> num;
        assign(0, 0, n, i, i, num);
        cout << get_sum(0, 0, n, i, i).s << endl;
    }

    int l, r, x;

    string req;

    while (m--) {
        cin >> req;
        if (req == "shuffle") {
            cin >> l >> r;

            long double summ = get(0, 0, n, l-1, r).s;

            upd(0, 0, n, l-1, r, summ / (r-l+1));
        }
        if (req == "get") {
            cin >> l;
            cout << get(0, 0, n, l-1, l).s << '\n';
        }
    }
}

signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.setf(ios_base::boolalpha);
    solve();
}
